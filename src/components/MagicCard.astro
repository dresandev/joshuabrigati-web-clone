<div class="border-wrapper">
	<div class="wrapper">
		<div class="radial-mask"></div>
		<div class="background-color"></div>
		<div class="shine-bg"></div>
		<canvas id="particle-canvas" width="1800" height="100"></canvas>
	</div>
</div>

<style>
	.border-wrapper {
		position: relative;
		padding: 1px;
		background-color: hsl(0 0% 100% / 0.1);
		border-radius: 24px;
	}

	html[data-theme="light"] .border-wrapper {
		background-color: hsl(0 0% 100% / 0.6);
	}

	.wrapper {
		position: relative;
		block-size: 100px;
		overflow: hidden;
		border-radius: inherit;
		background-color: hsl(0 0% 100% / 0.1);
	}

	html[data-theme="light"] .wrapper {
		position: static;
		background-color: hsl(0 0% 100% / 0.6);
	}

	.wrapper:hover {
		box-shadow: 0 5px 24px 0 hsl(240 5% 41% / 0.1);
	}

	.radial-mask {
		position: absolute;
		inset: -1px;
		background-image: radial-gradient(circle at 50% 150%, hsl(207 79% 51% / 0.17), transparent);
	}

	html[data-theme="light"] .radial-mask {
		background-image: radial-gradient(80% 6% at 50% 103%, rgba(111, 56, 252, 0.267), transparent);
		z-index: 2;
	}

	.shine-bg {
		position: absolute;
		inset: -8px;
		opacity: 0.4;
		filter: blur(8px);
		mask-image: radial-gradient(circle at 50% 150%, hsl(0 0 100%), transparent);
		background-image: conic-gradient(
			from -45deg at 50% 150%,
			transparent 0deg,
			hsl(263 62% 7%) 15deg,
			transparent 30deg,
			hsl(263 62% 7%) 45deg,
			transparent 60deg,
			hsl(263 62% 7%) 75deg,
			transparent 90deg
		);
	}

	html[data-theme="light"] .shine-bg {
		display: none;
	}

	.background-color {
		position: absolute;
		inset: -1px;
		border-radius: 23px;
		background-color: hsl(240 10% 4% / 0.7);
		transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	.wrapper:hover .background-color {
		background-color: hsl(0 0% 0% / 0.75);
	}

	html[data-theme="light"] .background-color {
		background-color: hsl(0 0% 98% / 0.7);
	}

	html[data-theme="light"] .wrapper:hover .background-color {
		background-color: hsl(0 0% 100% / 0.3);
	}
</style>

<script>
	import { $ } from "~/lib/dom-selector"
	import { getRandomNumber } from "~/lib/random-number"

	const canvas = $("#particle-canvas") as HTMLCanvasElement
	const ctx = canvas.getContext("2d")!
	const particlesArray: Particle[] = []

	class Particle {
		size: number
		x: number
		y: number
		speedY: number
		speedX: number
		opacity: number

		constructor() {
			this.size = getRandomNumber(2, 4)
			this.x = Math.random() * canvas.width
			this.y = canvas.height + this.size
			this.speedY = getRandomNumber(0.05, 0.15)
			this.speedX = getRandomNumber(-0.4, 0.4)
			this.opacity = 0.5
		}

		update() {
			this.y -= this.speedY
			this.x += this.speedX
			if (this.y < canvas.height * 0.5) {
				this.opacity -= 0.01
			}
		}

		draw() {
			ctx.fillStyle = `hsl(266 98% 66% / ${this.opacity})`
			ctx.beginPath()
			ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
			ctx.closePath()
			ctx.fill()
		}
	}

	function handleParticles() {
		for (let i = 0; i < particlesArray.length; i++) {
			particlesArray[i].update()
			particlesArray[i].draw()

			if (particlesArray[i].opacity <= 0) {
				particlesArray.splice(i, 1)
				i--
			}
		}
	}

	function createParticles() {
		if (particlesArray.length < 8) {
			particlesArray.push(new Particle())
		}
	}

	function animate() {
		ctx.clearRect(0, 0, canvas.width, canvas.height)
		handleParticles()
		createParticles()
		requestAnimationFrame(animate)
	}

	animate()
</script>
